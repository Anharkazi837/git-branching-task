{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Ds_product_source",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Ds_product_sink",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Dfproductsort"
				},
				{
					"name": "DropNulls",
					"description": "Filtering rows using expression on columns 'product_id, Product_name, Category, Price,Quantity, store_location."
				}
			],
			"scriptLines": [
				"source(output(",
				"          product_id as integer,",
				"          product_name as string,",
				"          category as string,",
				"          price as decimal(10,0),",
				"          quantity as integer,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"DropNulls sort(asc(category, true)) ~> Dfproductsort",
				"source1 filter(!isNull(product_id)&&",
				"!isNull(product_name)&&",
				"!isNull(category)&&",
				"!isNull(price)&&",
				"!isNull(quantity)&&",
				"!isNull(store_location)",
				") ~> DropNulls",
				"Dfproductsort sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as string,",
				"          quantity as string,",
				"          store_location as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}