{
	"name": "dataflow1",
	"properties": {
		"folder": {
			"name": "VENU_GRP4"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source2product"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source3product"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source4product"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source5product"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source6product"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source7"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "source9product2"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source10product"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source11product"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "source8"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sink",
						"type": "DatasetReference"
					},
					"name": "sinkfilter"
				},
				{
					"dataset": {
						"referenceName": "ds_sink",
						"type": "DatasetReference"
					},
					"name": "sinkunion"
				},
				{
					"dataset": {
						"referenceName": "ds_sink",
						"type": "DatasetReference"
					},
					"name": "sinkselect"
				},
				{
					"dataset": {
						"referenceName": "ds_sink",
						"type": "DatasetReference"
					},
					"name": "sinkaggre"
				},
				{
					"dataset": {
						"referenceName": "ds_sink",
						"type": "DatasetReference"
					},
					"name": "sinkderived"
				},
				{
					"dataset": {
						"referenceName": "ds_sink",
						"type": "DatasetReference"
					},
					"name": "sinksort"
				},
				{
					"dataset": {
						"referenceName": "ds_sink",
						"type": "DatasetReference"
					},
					"name": "sinkconditional"
				},
				{
					"dataset": {
						"referenceName": "ds_sink",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "sortbyprice"
				},
				{
					"name": "selectproductnamecategprice"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "split1"
				},
				{
					"name": "filterpriceSmartphonequantity"
				},
				{
					"name": "join1"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumnremove"
				},
				{
					"name": "filterdropnulls"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "filter2"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "filter3"
				},
				{
					"name": "filter4"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "filter5"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "filter6"
				},
				{
					"name": "derivedColumn7"
				},
				{
					"name": "filter7"
				},
				{
					"name": "derivedColumn8"
				},
				{
					"name": "filter8"
				},
				{
					"name": "filter9"
				},
				{
					"name": "derivedColumn9"
				}
			],
			"scriptLines": [
				"source(output(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as integer,",
				"          quantity as string,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2product",
				"source(output(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as string,",
				"          quantity as double,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3product",
				"source(output(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as float,",
				"          quantity as float,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4product",
				"source(output(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as float,",
				"          quantity as string,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5product",
				"source(output(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as float,",
				"          quantity as integer,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source6product",
				"source(output(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as string,",
				"          quantity as string,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source7",
				"source(output(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as string,",
				"          quantity as string,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source9product2",
				"source(output(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as string,",
				"          quantity as string,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source10product",
				"source(output(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as float,",
				"          quantity as string,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source11product",
				"source(output(",
				"          store_id as string,",
				"          store_name as string,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source8",
				"filter8 sort(desc(price, true)) ~> sortbyprice",
				"filter5 select(mapColumn(",
				"          product_name,",
				"          category,",
				"          price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectproductnamecategprice",
				"filter6 aggregate(groupBy(category),",
				"     total_quantity = sum(quantity),",
				"          averageprice = avg(toInteger(price))) ~> aggregate1",
				"filter7 derive(total_value = price*quantity) ~> derivedColumn1",
				"derivedColumn9 split(price>1000,",
				"     price<=1000,",
				"     disjoint: false) ~> split1@(price, price1, other)",
				"filterdropnulls filter(price>1000 && category == 'Smartphone' && quantity>0) ~> filterpriceSmartphonequantity",
				"source11product, source8 join(source7@store_location == source8@store_location,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"filter3, filter4 union(byName: true)~> union1",
				"source6product derive(product_name = replace(product_name,'\"','')\r",
				") ~> derivedColumnremove",
				"derivedColumnremove filter(!isNull(product_id) && !isNull(product_name) && !isNull(category) && !isNull(price) && !isNull(quantity) && !isNull(store_location)) ~> filterdropnulls",
				"source7 derive(product_name = replace(product_name,'\"','')) ~> derivedColumn2",
				"derivedColumn2 filter(!isNull(product_id) &&\r",
				"!isNull(product_name) &&\r",
				"!isNull(category) &&\r",
				"!isNull(price) &&\r",
				"!isNull(quantity) &&\r",
				"!isNull(store_location)) ~> filter2",
				"filter2, source8 join(source7@store_location == source8@store_location,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"source9product2 derive(product_name = replace(product_name,'\"','')) ~> derivedColumn3",
				"source10product derive(product_name = replace(product_name,'\"','')) ~> derivedColumn4",
				"derivedColumn3 filter(!isNull(product_id) &&\r",
				"!isNull(product_name) &&\r",
				"!isNull(category) &&\r",
				"!isNull(price) &&\r",
				"!isNull(quantity) &&\r",
				"!isNull(store_location)) ~> filter3",
				"derivedColumn4 filter(!isNull(product_id) &&\r",
				"!isNull(product_name) &&\r",
				"!isNull(category) &&\r",
				"!isNull(price) &&\r",
				"!isNull(quantity) &&\r",
				"!isNull(store_location)) ~> filter4",
				"source2product derive(product_name = replace(product_name,'\"','')) ~> derivedColumn5",
				"derivedColumn5 filter(!isNull(product_id) &&\r",
				"!isNull(product_name) &&\r",
				"!isNull(category) &&\r",
				"!isNull(price) &&\r",
				"!isNull(quantity) &&\r",
				"!isNull(store_location)) ~> filter5",
				"source3product derive(product_name = replace(product_name,'\"','')) ~> derivedColumn6",
				"derivedColumn6 filter(!isNull(product_id) &&\r",
				"!isNull(product_name) &&\r",
				"!isNull(category) &&\r",
				"!isNull(price) &&\r",
				"!isNull(quantity) &&\r",
				"!isNull(store_location)) ~> filter6",
				"source4product derive(product_name = replace(product_name,'\"','')) ~> derivedColumn7",
				"derivedColumn7 filter(!isNull(product_id) &&\r",
				"!isNull(product_name) &&\r",
				"!isNull(category) &&\r",
				"!isNull(price) &&\r",
				"!isNull(quantity) &&\r",
				"!isNull(store_location)) ~> filter7",
				"source11product derive(product_name = replace(product_name,'\"','')) ~> derivedColumn8",
				"derivedColumn8 filter(!isNull(product_id) &&\r",
				"!isNull(product_name) &&\r",
				"!isNull(category) &&\r",
				"!isNull(price) &&\r",
				"!isNull(quantity) &&\r",
				"!isNull(store_location)) ~> filter8",
				"source5product filter(!isNull(product_id) &&\r",
				"!isNull(product_name) &&\r",
				"!isNull(category) &&\r",
				"!isNull(price) &&\r",
				"!isNull(quantity) &&\r",
				"!isNull(store_location)) ~> filter9",
				"filter9 derive(product_name = replace(product_name,'\"','')) ~> derivedColumn9",
				"filterpriceSmartphonequantity sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkfilter",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkunion",
				"selectproductnamecategprice sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkselect",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkaggre",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkderived",
				"sortbyprice sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinksort",
				"split1@price sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkconditional",
				"join2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}