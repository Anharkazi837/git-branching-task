{
	"name": "Df_priya_datatransformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Priya_ProductGen2",
						"type": "DatasetReference"
					},
					"name": "productgen2"
				},
				{
					"dataset": {
						"referenceName": "DS_Priya_storeGen2",
						"type": "DatasetReference"
					},
					"name": "sourceStore"
				},
				{
					"dataset": {
						"referenceName": "DS_priya_product2",
						"type": "DatasetReference"
					},
					"name": "sourceProduct2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Sink_gen2",
						"type": "DatasetReference"
					},
					"name": "sinktogen2"
				},
				{
					"dataset": {
						"referenceName": "DS_sink_union",
						"type": "DatasetReference"
					},
					"name": "sinkunion"
				}
			],
			"transformations": [
				{
					"name": "filterByCategoryPrice"
				},
				{
					"name": "joinProductStore"
				},
				{
					"name": "sortbyPrice"
				},
				{
					"name": "CalculateproductValue"
				},
				{
					"name": "selectcolumns"
				},
				{
					"name": "aggregatebycategory"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as string,",
				"          quantity as string,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> productgen2",
				"source(output(",
				"          store_id as string,",
				"          store_name as string,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceStore",
				"source(output(",
				"          product_id as string,",
				"          product_name as string,",
				"          category as string,",
				"          price as string,",
				"          quantity as string,",
				"          store_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceProduct2",
				"productgen2 filter(( toInteger(price) >1000) && rlike(category,'Laptop')) ~> filterByCategoryPrice",
				"filterByCategoryPrice, sourceStore join(productgen2@store_location == sourceStore@store_location,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProductStore",
				"joinProductStore sort(desc(price, true)) ~> sortbyPrice",
				"sortbyPrice derive(ProductValue = toInteger(price) * toInteger(quantity)) ~> CalculateproductValue",
				"CalculateproductValue select(mapColumn(",
				"          product_name,",
				"          category,",
				"          price,",
				"          quantity,",
				"          ProductValue",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcolumns",
				"selectcolumns aggregate(groupBy(category),",
				"     TotalStock = sum(toInteger(quantity))) ~> aggregatebycategory",
				"sourceProduct2, productgen2 union(byName: true)~> union1",
				"aggregatebycategory sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinktogen2",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          category as string,",
				"          TotalStock as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkunion"
			]
		}
	}
}